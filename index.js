// Author: Ibrahim Ahmed, 000880591
/**
 * This the external javascrit that is used to create our coins svg, interactivity and help with the positioning of our winning animation
 * Created: March 23rd, 2023
 */

// our constant and mutated variables
const svgNS = "http://www.w3.org/2000/svg";
const GreenCounter = document.getElementById("green-count")
const RedCounter = document.getElementById("red-count")
const winning = document.getElementById("winning")
const score = document.getElementById("score")
// vairables used in the view and to create our coins
let numOfGreen = 0;
let numOfRed = 0;
let winNum;
let scoreNum = 0;
let xPosition = 20;
let yPosition = 20;
let padding = 50;
let radius = 40;

// function to create coins, this function is called by clicking a button in the html
function makeCoins() {
    // getting our svg element from our html
    const coinCollection = document.getElementById("coinCollection");

    // creating new coin
    let newCoin = document.createElementNS(svgNS, "circle");

    // setting class 
    newCoin.setAttribute("class", "coin");
    //setting all attributes
    newCoin.setAttribute("cx", (Math.floor(Math.random() * (300 - xPosition + 1)) + xPosition) + padding);
    newCoin.setAttribute("cy", Math.floor(Math.random() * (430 - yPosition + 1)) + yPosition);
    newCoin.setAttribute("r", radius);

    // adding the function to delete the coins on each coin
    newCoin.setAttribute("onclick", "deleteCoin()");

    // making color coin. Colors are generated by random
    if (Math.floor(Math.random() * 2) == 1) {
        newCoin.setAttribute("fill", "lightgreen");
        numOfGreen++;
    } else {
        newCoin.setAttribute("fill", "orangered")
        numOfRed++
    }
    // creating the winning number of green. This is updated each time a coin is created
    winNum = Math.floor(Math.random() * numOfGreen + 1);

    // updating the view. Adding the new coin to the svg container 
    coinCollection.appendChild(newCoin);
    GreenCounter.value = numOfGreen;
    RedCounter.value = numOfRed;

    // resetting the color incase game is won
    GreenCounter.style.color = "black"
    RedCounter.style.color = "black"
    winning.value = winNum;
    score.value = scoreNum;
}

// function to delete our coin
function deleteCoin() {
    const coins = document.querySelectorAll(".coin");
    // collection all coins into an array called coins
    
    for (let i = 0; i < coins.length; i++) {
        // using for lop to interate each coin that will be clicked from our coin collections
        coins[i].addEventListener("click", () => {
            coinCollection.removeChild(coins[i]);
            // checking color to uodate the view by subtracting one from the remaining coins left of the same color
            if (coins[i].getAttribute("fill") == "lightgreen") {
                numOfGreen--;
            } else {
                numOfRed--;
            }

            // updating the win number to allow fair play
            winNum = Math.floor(Math.random() * numOfGreen + 1);

            // update view
            GreenCounter.value = numOfGreen;
            RedCounter.value = numOfRed;
            winning.value = winNum;
        })
    }
}

// function to roll the entire coin collection
function rollCoins() {
    const coinCollection = document.getElementById("coinCollection");
    const coins = document.querySelectorAll(".coin");
    // creating new counter each time the collection is rolled
    let newGreen = 0;
    let newRed = 0;
    numOfGreen = 0;
    numOfRed = 0;

    coinCollection.classList.add("animate");
    // adding animation class
    for (let i = 0; i < coins.length; i++) {
         // randomize the position of each coin again
         coins[i].setAttribute("cx", (Math.floor(Math.random() * (300 - xPosition + 1)) + xPosition) + padding);
         coins[i].setAttribute("cy", Math.floor(Math.random() * (350 - yPosition + 1)) + yPosition);
         coins[i].setAttribute("r", radius + 10);

        if (Math.floor(Math.random() * 2) == 1) {
            setTimeout(() => { coins[i].setAttribute("fill", "lightgreen"); }, 500);
            newGreen++;
            numOfGreen++
            // this will remove the animation from repeating after completion
        } else {
            setTimeout(() => { coins[i].setAttribute("fill", "orangered"); }, 500);
            newRed++;
            numOfRed++;
        }
        // update the view
        GreenCounter.value = newGreen;
        RedCounter.value = newRed;
    }
    setTimeout(() => { coinCollection.classList.remove('animate'); }, 1050);

    // to see if game won
    if (numOfGreen == winNum) {
        GreenCounter.style.color = "gold"
        RedCounter.style.color = "gold"
        scoreNum++;
        if (scoreNum >= 10) {
            setTimeout(()=>{
                document.querySelector(".animation").style.display = "block";
                }, 1000)
        }
       
    } else {
        GreenCounter.style.color = "black"
        RedCounter.style.color = "black"
        document.querySelector(".animation").style.display = "none";
    }
    score.value = scoreNum;
}

// a dynamic function to position the balls used in the animation
function placeBall() {
    const ball = document.querySelectorAll(".ball");
    for (let i = 0; i < ball.length; i++) {
        // translate position is generated at random for each ball
        ball[i].style.transform = "translateX(" + Math.floor(Math.random() * 401) + "px) " + "translateY(" + Math.floor(Math.random() * 401) + "px)" ;

    }
}
// calling the function
placeBall();
